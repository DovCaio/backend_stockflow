// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
 provider      = "prisma-client-js"
 binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Product {
  id           String  @id @default(cuid())
  name         String
  sku          String  @unique
  description  String?
  category     String?
  price        Float   @default(0)
  currentStock Int     @default(0)
  minimumStock Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  movements StockMovement[]
  alerts    StockAlert[]

  @@map("products")
}
// model Historic {
//   id Int @default(autoincrement()) @id
//   log String
//   currentStock Int
//   creatAt DateTime @default(now())
//   product Product @relation(fields: [productId], references: [id])
//   productId Int

// }
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movements StockMovement[]
  alerts    StockAlert[]

  @@map("users")
}

model StockMovement {
  id        String      @id @default(cuid())
  type      MovementType
  quantity  Int
  reason    String?
  note      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  productId String
  userId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model StockAlert {
  id        String      @id @default(cuid())
  type      AlertType
  message   String
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  productId String
  userId    String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("stock_alerts")
}

enum Role {
  ADMIN
  USER
}

enum MovementType {
  IN
  OUT
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
}
